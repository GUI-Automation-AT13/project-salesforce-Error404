plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.rest-assured:rest-assured:4.4.0'
    implementation 'io.github.cdimascio:dotenv-java:2.2.0'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'
    implementation 'io.github.bonigarcia:webdrivermanager:4.4.3'
    implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.12.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.4'
    implementation 'net.masterthought:cucumber-reporting:5.5.3'
    implementation 'org.slf4j:slf4j-simple:1.7.30'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'log4j:log4j:1.2.17'
    testImplementation 'org.testng:testng:7.4.0'
    testCompile 'io.cucumber:cucumber-java:6.10.4'
    testCompile 'io.cucumber:cucumber-testng:6.10.4'
    testCompile 'io.cucumber:cucumber-picocontainer:6.10.4'
    compile 'tech.grasshopper:extentreports-cucumber6-adapter:2.8.2'
}

test {
    ignoreFailures = true
    scanForTestClasses = false
    testLogging.showStandardStreams = true
    useTestNG()
    scanForTestClasses = false
}

checkstyle {
    toolVersion '8.44'
    configFile file('config/checkstyle/checkstyle.xml')
    checkstyleMain.source = "src/"
}

checkstyleMain {
    source = 'src/'
}

checkstyleTest {
    source = 'src/'
}

test.finalizedBy("checkstyleMain")

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumberCli() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [
                    '--plugin', 'pretty',
                    '--plugin', 'html:build/cucumber/cucumber-report.html',
                    '--plugin', 'json:build/cucumber/cucumber.json',
                    '--plugin', 'rerun:build/cucumber/rerun.txt',
                    '--glue', 'cucumber',
                    'src/test/resources/features']
            ignoreExitValue = true
        }
    }
}

task executeFeatures(type: Test) {
    useTestNG()
    options {
        useDefaultListeners = false
        jvmArgs = ['-Dcucumber.glue=cucumber']
        jvmArgs = ['-Dcucumber.features=src/test/resources/features/']
        jvmArgs = ['-Dcucumber.plugin=pretty,' + 'html:build/cucumber/cucumber-report.html,' +
                           'json:build/cucumber/cucumber.json,' +
                           'r' +
                           'erun:build/cucumber/rerun.txt']
    }
    ignoreFailures = true
    scanForTestClasses = false
    testLogging.showStandardStreams = true
}
jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['core/**',
                                        'salesforce/api/**',
                                        'salesforce/config/**',
                                        'salesforce/entities/**',
                                        'salesforce/ui/**'])
        }))
    }
}

check.dependsOn jacocoTestReport

test.finalizedBy("jacocoTestReport")
